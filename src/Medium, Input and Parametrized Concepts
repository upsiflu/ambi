
Applying a Medium.

Pure ambilang can only produce
- Relations
- unique Names (with edit-time disambiguation)
- edit-time Input (of unspecific boundaries).

To map this to Html (or any other medium),
we employ a mapping function.

The Api takes an app with a signal name (where signals are defined in a Dict)
and then maps it to an Html.

Example:
ambi

works
  + work input
    + paragraph input
CV
  title input
  + paragraph +
    input
    footnote
      representation input
      title work
      title input
      definition +
        input
        link
          input
          url input

in this case, the ambi provides
  input (edit-time variable)
  work (an unspecific concept, i.e. unique in view-time)

the Medium has to provide the other mappings:
  input
   -> title
  work
   -> title
  input
   -> footnote representation
  input
   -> url
  url
   -> input
    -> link
  <Medial>
   -> footnote definition
 <Medial>
  -> paragraph
  definition
   -> title
    -> footnote representation
     -> footnote

Most naively, a Medium would swallow whatever
it understands, and default to general types
where it has no vocabulary.

Additionally, we may note that view is
Medium-specific, and should not be the responsibility of
the general interpreter.
Otoh, the management of ids and inputs...?

Let's see what is nescessary:

- Relations
- edit-time Input
 (of unspecific boundaries)
- unique Names
 (with edit-time disambiguation)

A Relation renders into a control (+)
  if an author (Me) is present.
An Input renders to an input control
  if an author (Me) is present.
A Unique name renders to
- a disambiguation if defined ambiguously
- a clone if defined once
- a variable (id) if not defined.

The following aspects of the document are
the Medium's responsibility:
- decide which attribute gets the name
- decide thich HtmlTag is suitable
- decide how to render input.

In the above example, we have got an interesting case:
a footnote is defined by
- its representation
- its title
- its definition.
A footnote title is ambiguous in that it can be
| just a text
| an entry of type 'work' (which would turn it into a link).

The css handles inputs of type 'work' by adorning them with Guillemots.

Now let's imagine the Medium does not
transform the structure in any way, only
add classes and tags.
Default is section.

works                           section.works
  + work input                    section.work#(workUID)
                                    h2 (workUID)
    + paragraph input               p#editID ...
CV                              section.CV
  title input                     h1.title ...
  + paragraph +                   p#editID
    input                           span#editID ...
    footnote                        span.footnote#editID
      representation input            a.representation[->definition] ...
      title work                      = h3.title a.work[->workUID] (workUID)
      title input                     | h3.title ...
      definition +                    section.definition
        input                           span#editID ...
        link                            a#editID[->...] ...
          input                           ---------
          url input                       ---------

In the above example, work is a concept.
Concepts can be parametrized over an input
(which may, in the future, include ambi).
A Concept c
parametrized over an input i_0 .. i_n
is equivalent to concepts c i_0 .. c i_n

A concept without a parameter is unique.
Without the input after "work", we'd get
  p#works/editID0/editID1
where editID0 is the editID of + work and editID1 is the editID of + paragraph.
As expected, this is the relative locus from app.

so above, we might have
the concepts
- work Blue Painting
- work Video Jams

but also this input wants to be represented in html.
And it's somewhat embracing the paragraphs.
So...
we reserve the h2 space for concept parameters
because h is for header and h1 should be app names.
Other media may do different.

In the link to 'a work', we Refer to work.
A reference produces the result of the input, i.e. text (but could be img or video or...)

The class is, indeed, the 'class' of that variable.
